//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  CuttingPlaneSettings : public BaseSettings
    {
	public:
        double PointX;
        double PointY;
        double PointZ;
        double NormalX;
        double NormalY;
        double NormalZ;
		
		CuttingPlaneSettings() : BaseSettings()
        {
		
			PointX = 0.0;
			PointY = 0.0;
			PointZ = 0.0;
			NormalX = 0.0;
			NormalY = 0.0;
			NormalZ = 0.0;
        }

		
        CuttingPlaneSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["PointX"].isNull()) { PointX = (jsonNode["PointX"].asDouble());	} else { PointX = 0.0; }
			if (!jsonNode["PointY"].isNull()) { PointY = (jsonNode["PointY"].asDouble());	} else { PointY = 0.0; }
			if (!jsonNode["PointZ"].isNull()) { PointZ = (jsonNode["PointZ"].asDouble());	} else { PointZ = 0.0; }
			if (!jsonNode["NormalX"].isNull()) { NormalX = (jsonNode["NormalX"].asDouble());	} else { NormalX = 0.0; }
			if (!jsonNode["NormalY"].isNull()) { NormalY = (jsonNode["NormalY"].asDouble());	} else { NormalY = 0.0; }
			if (!jsonNode["NormalZ"].isNull()) { NormalZ = (jsonNode["NormalZ"].asDouble());	} else { NormalZ = 0.0; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["PointX"] = (PointX);
			jsonNode["PointY"] = (PointY);
			jsonNode["PointZ"] = (PointZ);
			jsonNode["NormalX"] = (NormalX);
			jsonNode["NormalY"] = (NormalY);
			jsonNode["NormalZ"] = (NormalZ);
        }

	};
} } } 
