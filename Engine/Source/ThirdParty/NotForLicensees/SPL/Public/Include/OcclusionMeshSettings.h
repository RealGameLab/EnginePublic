//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  OcclusionMeshSettings : public BaseSettings
    {
	public:
        bool InvertOutputMesh;
        Simplygon::SPL::v80::OcclusionModes OcclusionMode;
        int OnScreenSize;
        int OnScreenErrorTolerance;
		
		OcclusionMeshSettings() : BaseSettings()
        {
		
			InvertOutputMesh = false;
			OcclusionMode = SG_OCCLUSIONMODE_OCCLUDER;
			OnScreenSize = 100;
			OnScreenErrorTolerance = 4;
        }

		
        OcclusionMeshSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["InvertOutputMesh"].isNull()) { InvertOutputMesh = (jsonNode["InvertOutputMesh"].asBool());	} else { InvertOutputMesh = false; }
			if (!jsonNode["OcclusionMode"].isNull()) { OcclusionMode = Simplygon::SPL::v80::OcclusionModesUtil::Parse(jsonNode["OcclusionMode"].asString(), SG_OCCLUSIONMODE_OCCLUDER);	} else { OcclusionMode = SG_OCCLUSIONMODE_OCCLUDER; }
			if (!jsonNode["OnScreenSize"].isNull()) { OnScreenSize = (jsonNode["OnScreenSize"].asInt());	} else { OnScreenSize = 100; }
			if (!jsonNode["OnScreenErrorTolerance"].isNull()) { OnScreenErrorTolerance = (jsonNode["OnScreenErrorTolerance"].asInt());	} else { OnScreenErrorTolerance = 4; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["InvertOutputMesh"] = (InvertOutputMesh);
			jsonNode["OcclusionMode"] = Simplygon::SPL::v80::OcclusionModesUtil::ToString(OcclusionMode);
			jsonNode["OnScreenSize"] = (OnScreenSize);
			jsonNode["OnScreenErrorTolerance"] = (OnScreenErrorTolerance);
        }

	};
} } } 
