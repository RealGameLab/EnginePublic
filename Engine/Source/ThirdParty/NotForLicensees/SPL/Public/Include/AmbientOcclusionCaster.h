//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseMaterialCaster.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  AmbientOcclusionCaster : public BaseMaterialCaster
    {
	public:
        string ColorType;
        int Dilation;
        Simplygon::SPL::v80::DitherType DitherType;
        double OcclusionFalloff;
        double OcclusionMultiplier;
        int OutputChannelBitDepth;
        int OutputChannels;
        int RaysPerPixel;
        bool UseSimpleOcclusionMode;
		
		AmbientOcclusionCaster() : BaseMaterialCaster()
        {
			Type = "AmbientOcclusionCaster";
		
			ColorType = "Diffuse";
			Dilation = 10;
			DitherType = SG_DITHERPATTERNS_FLOYDSTEINBERG;
			OcclusionFalloff = -1.0;
			OcclusionMultiplier = -1.0;
			OutputChannelBitDepth = 8;
			OutputChannels = 4;
			RaysPerPixel = 256;
			UseSimpleOcclusionMode = false;
        }

		
        AmbientOcclusionCaster(const Json::Value& jsonNode) : BaseMaterialCaster(jsonNode)
        {
			Type = "AmbientOcclusionCaster";
			if (!jsonNode["ColorType"].isNull()) { ColorType = (jsonNode["ColorType"].asString()); } else { ColorType = "Diffuse"; }
			if (!jsonNode["Dilation"].isNull()) { Dilation = (jsonNode["Dilation"].asInt()); } else { Dilation = 10; }
			if (!jsonNode["DitherType"].isNull()) { DitherType = Simplygon::SPL::v80::DitherTypeUtil::Parse(jsonNode["DitherType"].asString(), SG_DITHERPATTERNS_FLOYDSTEINBERG); } else { DitherType = SG_DITHERPATTERNS_FLOYDSTEINBERG; }
			if (!jsonNode["OcclusionFalloff"].isNull()) { OcclusionFalloff = (jsonNode["OcclusionFalloff"].asDouble()); } else { OcclusionFalloff = -1.0; }
			if (!jsonNode["OcclusionMultiplier"].isNull()) { OcclusionMultiplier = (jsonNode["OcclusionMultiplier"].asDouble()); } else { OcclusionMultiplier = -1.0; }
			if (!jsonNode["OutputChannelBitDepth"].isNull()) { OutputChannelBitDepth = (jsonNode["OutputChannelBitDepth"].asInt()); } else { OutputChannelBitDepth = 8; }
			if (!jsonNode["OutputChannels"].isNull()) { OutputChannels = (jsonNode["OutputChannels"].asInt()); } else { OutputChannels = 4; }
			if (!jsonNode["RaysPerPixel"].isNull()) { RaysPerPixel = (jsonNode["RaysPerPixel"].asInt()); } else { RaysPerPixel = 256; }
			if (!jsonNode["UseSimpleOcclusionMode"].isNull()) { UseSimpleOcclusionMode = (jsonNode["UseSimpleOcclusionMode"].asBool()); } else { UseSimpleOcclusionMode = false; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseMaterialCaster::ToJson(jsonNode);

			jsonNode["ColorType"] = (ColorType);
			jsonNode["Dilation"] = (Dilation);
			jsonNode["DitherType"] = Simplygon::SPL::v80::DitherTypeUtil::ToString(DitherType);
			jsonNode["OcclusionFalloff"] = (OcclusionFalloff);
			jsonNode["OcclusionMultiplier"] = (OcclusionMultiplier);
			jsonNode["OutputChannelBitDepth"] = (OutputChannelBitDepth);
			jsonNode["OutputChannels"] = (OutputChannels);
			jsonNode["RaysPerPixel"] = (RaysPerPixel);
			jsonNode["UseSimpleOcclusionMode"] = (UseSimpleOcclusionMode);
        }

	};
} } } 
