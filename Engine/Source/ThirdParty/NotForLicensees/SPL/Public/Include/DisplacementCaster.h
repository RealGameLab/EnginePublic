//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseMaterialCaster.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  DisplacementCaster : public BaseMaterialCaster
    {
	public:
        int Dilation;
        double DistanceScaling;
        Simplygon::SPL::v80::DitherType DitherType;
        bool GenerateScalarDisplacement;
        bool GenerateTangentSpaceDisplacement;
        int OutputChannelBitDepth;
        int OutputChannels;
		
		DisplacementCaster() : BaseMaterialCaster()
        {
			Type = "DisplacementCaster";
		
			Dilation = 10;
			DistanceScaling = 0.0;
			DitherType = SG_DITHERPATTERNS_FLOYDSTEINBERG;
			GenerateScalarDisplacement = false;
			GenerateTangentSpaceDisplacement = false;
			OutputChannelBitDepth = 8;
			OutputChannels = 4;
        }

		
        DisplacementCaster(const Json::Value& jsonNode) : BaseMaterialCaster(jsonNode)
        {
			Type = "DisplacementCaster";
			if (!jsonNode["Dilation"].isNull()) { Dilation = (jsonNode["Dilation"].asInt()); } else { Dilation = 10; }
			if (!jsonNode["DistanceScaling"].isNull()) { DistanceScaling = (jsonNode["DistanceScaling"].asDouble()); } else { DistanceScaling = 0.0; }
			if (!jsonNode["DitherType"].isNull()) { DitherType = Simplygon::SPL::v80::DitherTypeUtil::Parse(jsonNode["DitherType"].asString(), SG_DITHERPATTERNS_FLOYDSTEINBERG); } else { DitherType = SG_DITHERPATTERNS_FLOYDSTEINBERG; }
			if (!jsonNode["GenerateScalarDisplacement"].isNull()) { GenerateScalarDisplacement = (jsonNode["GenerateScalarDisplacement"].asBool()); } else { GenerateScalarDisplacement = false; }
			if (!jsonNode["GenerateTangentSpaceDisplacement"].isNull()) { GenerateTangentSpaceDisplacement = (jsonNode["GenerateTangentSpaceDisplacement"].asBool()); } else { GenerateTangentSpaceDisplacement = false; }
			if (!jsonNode["OutputChannelBitDepth"].isNull()) { OutputChannelBitDepth = (jsonNode["OutputChannelBitDepth"].asInt()); } else { OutputChannelBitDepth = 8; }
			if (!jsonNode["OutputChannels"].isNull()) { OutputChannels = (jsonNode["OutputChannels"].asInt()); } else { OutputChannels = 4; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseMaterialCaster::ToJson(jsonNode);

			jsonNode["Dilation"] = (Dilation);
			jsonNode["DistanceScaling"] = (DistanceScaling);
			jsonNode["DitherType"] = Simplygon::SPL::v80::DitherTypeUtil::ToString(DitherType);
			jsonNode["GenerateScalarDisplacement"] = (GenerateScalarDisplacement);
			jsonNode["GenerateTangentSpaceDisplacement"] = (GenerateTangentSpaceDisplacement);
			jsonNode["OutputChannelBitDepth"] = (OutputChannelBitDepth);
			jsonNode["OutputChannels"] = (OutputChannels);
        }

	};
} } } 
