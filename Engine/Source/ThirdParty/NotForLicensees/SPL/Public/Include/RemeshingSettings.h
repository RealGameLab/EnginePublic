//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class RemeshingSettings : public BaseSettings
    {
	public:
        string CuttingPlaneSelectionSetName;
        double HardEdgeAngleInRadians;
        double EmptySpaceOverride;
        int MaxTriangleSize;
        int MergeDistance;
        int OnScreenSize;
        string ProcessSelectionSetName;
        Simplygon::SPL::v80::SurfaceTransferMode SurfaceTransferMode;
        bool TransferColors;
        bool TransferNormals;
        bool UseCuttingPlanes;
        bool UseEmptySpaceOverride;
        string ClippingGeometrySelectionSetName;
        bool UseClippingGeometryEmptySpaceOverride;
        bool UseClippingGeometry;
		
		RemeshingSettings() : BaseSettings()
        {
		
			CuttingPlaneSelectionSetName = "";
			HardEdgeAngleInRadians = 80.0 * (3.14 / 180.0);
			EmptySpaceOverride = 0.0;
			MaxTriangleSize = 0;
			MergeDistance = 4;
			OnScreenSize = 100;
			ProcessSelectionSetName = "";
			SurfaceTransferMode = SG_SURFACETRANSFER_ACCURATE;
			TransferColors = false;
			TransferNormals = false;
			UseCuttingPlanes = false;
			UseEmptySpaceOverride = false;
			ClippingGeometrySelectionSetName = "";
			UseClippingGeometryEmptySpaceOverride = false;
			UseClippingGeometry = false;
        }

		
        RemeshingSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["CuttingPlaneSelectionSetName"].isNull()) { CuttingPlaneSelectionSetName = (jsonNode["CuttingPlaneSelectionSetName"].asString());	} else { CuttingPlaneSelectionSetName = ""; }
			if (!jsonNode["HardEdgeAngleInRadians"].isNull()) { HardEdgeAngleInRadians = (jsonNode["HardEdgeAngleInRadians"].asDouble());	} else { HardEdgeAngleInRadians = 80.0 * (3.14 / 180.0); }
			if (!jsonNode["EmptySpaceOverride"].isNull()) { EmptySpaceOverride = (jsonNode["EmptySpaceOverride"].asDouble());	} else { EmptySpaceOverride = 0.0; }
			if (!jsonNode["MaxTriangleSize"].isNull()) { MaxTriangleSize = (jsonNode["MaxTriangleSize"].asInt());	} else { MaxTriangleSize = 0; }
			if (!jsonNode["MergeDistance"].isNull()) { MergeDistance = (jsonNode["MergeDistance"].asInt());	} else { MergeDistance = 4; }
			if (!jsonNode["OnScreenSize"].isNull()) { OnScreenSize = (jsonNode["OnScreenSize"].asInt());	} else { OnScreenSize = 100; }
			if (!jsonNode["ProcessSelectionSetName"].isNull()) { ProcessSelectionSetName = (jsonNode["ProcessSelectionSetName"].asString());	} else { ProcessSelectionSetName = ""; }
			if (!jsonNode["SurfaceTransferMode"].isNull()) { SurfaceTransferMode = Simplygon::SPL::v80::SurfaceTransferModeUtil::Parse(jsonNode["SurfaceTransferMode"].asString(), SG_SURFACETRANSFER_ACCURATE);	} else { SurfaceTransferMode = SG_SURFACETRANSFER_ACCURATE; }
			if (!jsonNode["TransferColors"].isNull()) { TransferColors = (jsonNode["TransferColors"].asBool());	} else { TransferColors = false; }
			if (!jsonNode["TransferNormals"].isNull()) { TransferNormals = (jsonNode["TransferNormals"].asBool());	} else { TransferNormals = false; }
			if (!jsonNode["UseCuttingPlanes"].isNull()) { UseCuttingPlanes = (jsonNode["UseCuttingPlanes"].asBool());	} else { UseCuttingPlanes = false; }
			if (!jsonNode["UseEmptySpaceOverride"].isNull()) { UseEmptySpaceOverride = (jsonNode["UseEmptySpaceOverride"].asBool());	} else { UseEmptySpaceOverride = false; }
			if (!jsonNode["ClippingGeometrySelectionSetName"].isNull()) { ClippingGeometrySelectionSetName = (jsonNode["ClippingGeometrySelectionSetName"].asString());	} else { ClippingGeometrySelectionSetName = ""; }
			if (!jsonNode["UseClippingGeometryEmptySpaceOverride"].isNull()) { UseClippingGeometryEmptySpaceOverride = (jsonNode["UseClippingGeometryEmptySpaceOverride"].asBool());	} else { UseClippingGeometryEmptySpaceOverride = false; }
			if (!jsonNode["UseClippingGeometry"].isNull()) { UseClippingGeometry = (jsonNode["UseClippingGeometry"].asBool());	} else { UseClippingGeometry = false; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["CuttingPlaneSelectionSetName"] = (CuttingPlaneSelectionSetName);
			jsonNode["HardEdgeAngleInRadians"] = (HardEdgeAngleInRadians);
			jsonNode["EmptySpaceOverride"] = (EmptySpaceOverride);
			jsonNode["MaxTriangleSize"] = (MaxTriangleSize);
			jsonNode["MergeDistance"] = (MergeDistance);
			jsonNode["OnScreenSize"] = (OnScreenSize);
			jsonNode["ProcessSelectionSetName"] = (ProcessSelectionSetName);
			jsonNode["SurfaceTransferMode"] = Simplygon::SPL::v80::SurfaceTransferModeUtil::ToString(SurfaceTransferMode);
			jsonNode["TransferColors"] = (TransferColors);
			jsonNode["TransferNormals"] = (TransferNormals);
			jsonNode["UseCuttingPlanes"] = (UseCuttingPlanes);
			jsonNode["UseEmptySpaceOverride"] = (UseEmptySpaceOverride);
			jsonNode["ClippingGeometrySelectionSetName"] = (ClippingGeometrySelectionSetName);
			jsonNode["UseClippingGeometryEmptySpaceOverride"] = (UseClippingGeometryEmptySpaceOverride);
			jsonNode["UseClippingGeometry"] = (UseClippingGeometry);
        }

	};
} } } 
