//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  MappingImageSettings : public BaseSettings
    {
	public:
        bool AllowTransparencyMapping;
        double AutomaticTextureSizeMultiplier;
        Simplygon::SPL::v80::ChartAggregatorMode ChartAggregatorMode;
        string ChartAggregatorOriginalChartProportionsChannel;
        int ChartAggregatorOriginalTexCoordLevel;
        string ChartAggregatorOriginalTexCoordLevelName;
        bool ChartAggregatorSeparateOverlappingCharts;
        bool ForcePower2Texture;
        bool GenerateMappingImage;
        bool GenerateTangents;
        bool GenerateTexCoords;
        int GutterSpace;
        int Height;
        int MaximumLayers;
        int MultisamplingLevel;
        double ParameterizerMaxStretch;
        Simplygon::SPL::v80::TexCoordGeneratorType TexCoordGeneratorType;
        int TexCoordLevel;
        bool UseAutomaticTextureSize;
        bool UseFullRetexturing;
        bool UseVertexWeights;
        int Width;
		
		MappingImageSettings() : BaseSettings()
        {
		
			AllowTransparencyMapping = true;
			AutomaticTextureSizeMultiplier = 1.0;
			ChartAggregatorMode = SG_CHARTAGGREGATORMODE_TEXTURESIZEPROPORTIONS;
			ChartAggregatorOriginalChartProportionsChannel = "Diffuse";
			ChartAggregatorOriginalTexCoordLevel = 0;
			ChartAggregatorOriginalTexCoordLevelName = "";
			ChartAggregatorSeparateOverlappingCharts = true;
			ForcePower2Texture = false;
			GenerateMappingImage = false;
			GenerateTangents = false;
			GenerateTexCoords = false;
			GutterSpace = 1;
			Height = 512;
			MaximumLayers = 3;
			MultisamplingLevel = 2;
			ParameterizerMaxStretch = 0.2;
			TexCoordGeneratorType = SG_TEXCOORDGENERATORTYPE_PARAMETERIZER;
			TexCoordLevel = 255;
			UseAutomaticTextureSize = false;
			UseFullRetexturing = false;
			UseVertexWeights = false;
			Width = 512;
        }

		
        MappingImageSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["AllowTransparencyMapping"].isNull()) { AllowTransparencyMapping = (jsonNode["AllowTransparencyMapping"].asBool());	} else { AllowTransparencyMapping = true; }
			if (!jsonNode["AutomaticTextureSizeMultiplier"].isNull()) { AutomaticTextureSizeMultiplier = (jsonNode["AutomaticTextureSizeMultiplier"].asDouble());	} else { AutomaticTextureSizeMultiplier = 1.0; }
			if (!jsonNode["ChartAggregatorMode"].isNull()) { ChartAggregatorMode = Simplygon::SPL::v80::ChartAggregatorModeUtil::Parse(jsonNode["ChartAggregatorMode"].asString(), SG_CHARTAGGREGATORMODE_TEXTURESIZEPROPORTIONS);	} else { ChartAggregatorMode = SG_CHARTAGGREGATORMODE_TEXTURESIZEPROPORTIONS; }
			if (!jsonNode["ChartAggregatorOriginalChartProportionsChannel"].isNull()) { ChartAggregatorOriginalChartProportionsChannel = (jsonNode["ChartAggregatorOriginalChartProportionsChannel"].asString());	} else { ChartAggregatorOriginalChartProportionsChannel = "Diffuse"; }
			if (!jsonNode["ChartAggregatorOriginalTexCoordLevel"].isNull()) { ChartAggregatorOriginalTexCoordLevel = (jsonNode["ChartAggregatorOriginalTexCoordLevel"].asInt());	} else { ChartAggregatorOriginalTexCoordLevel = 0; }
			if (!jsonNode["ChartAggregatorOriginalTexCoordLevelName"].isNull()) { ChartAggregatorOriginalTexCoordLevelName = (jsonNode["ChartAggregatorOriginalTexCoordLevelName"].asString());	} else { ChartAggregatorOriginalTexCoordLevelName = ""; }
			if (!jsonNode["ChartAggregatorSeparateOverlappingCharts"].isNull()) { ChartAggregatorSeparateOverlappingCharts = (jsonNode["ChartAggregatorSeparateOverlappingCharts"].asBool());	} else { ChartAggregatorSeparateOverlappingCharts = true; }
			if (!jsonNode["ForcePower2Texture"].isNull()) { ForcePower2Texture = (jsonNode["ForcePower2Texture"].asBool());	} else { ForcePower2Texture = false; }
			if (!jsonNode["GenerateMappingImage"].isNull()) { GenerateMappingImage = (jsonNode["GenerateMappingImage"].asBool());	} else { GenerateMappingImage = false; }
			if (!jsonNode["GenerateTangents"].isNull()) { GenerateTangents = (jsonNode["GenerateTangents"].asBool());	} else { GenerateTangents = false; }
			if (!jsonNode["GenerateTexCoords"].isNull()) { GenerateTexCoords = (jsonNode["GenerateTexCoords"].asBool());	} else { GenerateTexCoords = false; }
			if (!jsonNode["GutterSpace"].isNull()) { GutterSpace = (jsonNode["GutterSpace"].asInt());	} else { GutterSpace = 1; }
			if (!jsonNode["Height"].isNull()) { Height = (jsonNode["Height"].asInt());	} else { Height = 512; }
			if (!jsonNode["MaximumLayers"].isNull()) { MaximumLayers = (jsonNode["MaximumLayers"].asInt());	} else { MaximumLayers = 3; }
			if (!jsonNode["MultisamplingLevel"].isNull()) { MultisamplingLevel = (jsonNode["MultisamplingLevel"].asInt());	} else { MultisamplingLevel = 2; }
			if (!jsonNode["ParameterizerMaxStretch"].isNull()) { ParameterizerMaxStretch = (jsonNode["ParameterizerMaxStretch"].asDouble());	} else { ParameterizerMaxStretch = 0.2; }
			if (!jsonNode["TexCoordGeneratorType"].isNull()) { TexCoordGeneratorType = Simplygon::SPL::v80::TexCoordGeneratorTypeUtil::Parse(jsonNode["TexCoordGeneratorType"].asString(), SG_TEXCOORDGENERATORTYPE_PARAMETERIZER);	} else { TexCoordGeneratorType = SG_TEXCOORDGENERATORTYPE_PARAMETERIZER; }
			if (!jsonNode["TexCoordLevel"].isNull()) { TexCoordLevel = (jsonNode["TexCoordLevel"].asInt());	} else { TexCoordLevel = 255; }
			if (!jsonNode["UseAutomaticTextureSize"].isNull()) { UseAutomaticTextureSize = (jsonNode["UseAutomaticTextureSize"].asBool());	} else { UseAutomaticTextureSize = false; }
			if (!jsonNode["UseFullRetexturing"].isNull()) { UseFullRetexturing = (jsonNode["UseFullRetexturing"].asBool());	} else { UseFullRetexturing = false; }
			if (!jsonNode["UseVertexWeights"].isNull()) { UseVertexWeights = (jsonNode["UseVertexWeights"].asBool());	} else { UseVertexWeights = false; }
			if (!jsonNode["Width"].isNull()) { Width = (jsonNode["Width"].asInt());	} else { Width = 512; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["AllowTransparencyMapping"] = (AllowTransparencyMapping);
			jsonNode["AutomaticTextureSizeMultiplier"] = (AutomaticTextureSizeMultiplier);
			jsonNode["ChartAggregatorMode"] = Simplygon::SPL::v80::ChartAggregatorModeUtil::ToString(ChartAggregatorMode);
			jsonNode["ChartAggregatorOriginalChartProportionsChannel"] = (ChartAggregatorOriginalChartProportionsChannel);
			jsonNode["ChartAggregatorOriginalTexCoordLevel"] = (ChartAggregatorOriginalTexCoordLevel);
			jsonNode["ChartAggregatorOriginalTexCoordLevelName"] = (ChartAggregatorOriginalTexCoordLevelName);
			jsonNode["ChartAggregatorSeparateOverlappingCharts"] = (ChartAggregatorSeparateOverlappingCharts);
			jsonNode["ForcePower2Texture"] = (ForcePower2Texture);
			jsonNode["GenerateMappingImage"] = (GenerateMappingImage);
			jsonNode["GenerateTangents"] = (GenerateTangents);
			jsonNode["GenerateTexCoords"] = (GenerateTexCoords);
			jsonNode["GutterSpace"] = (GutterSpace);
			jsonNode["Height"] = (Height);
			jsonNode["MaximumLayers"] = (MaximumLayers);
			jsonNode["MultisamplingLevel"] = (MultisamplingLevel);
			jsonNode["ParameterizerMaxStretch"] = (ParameterizerMaxStretch);
			jsonNode["TexCoordGeneratorType"] = Simplygon::SPL::v80::TexCoordGeneratorTypeUtil::ToString(TexCoordGeneratorType);
			jsonNode["TexCoordLevel"] = (TexCoordLevel);
			jsonNode["UseAutomaticTextureSize"] = (UseAutomaticTextureSize);
			jsonNode["UseFullRetexturing"] = (UseFullRetexturing);
			jsonNode["UseVertexWeights"] = (UseVertexWeights);
			jsonNode["Width"] = (Width);
        }

	};
} } } 
