//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  ReductionSettings : public BaseSettings
    {
	public:
        bool AllowDegenerateTexCoords;
        bool CreateGeomorphGeometry;
        Simplygon::SPL::v80::DataCreationPreferences DataCreationPreferences;
        double EdgeSetImportance;
        bool GenerateGeomorphData;
        double GeometryImportance;
        double GroupImportance;
        double InwardMoveMultiplier;
        bool KeepSymmetry;
        double MaterialImportance;
        double MaxDeviation;
        double MaxEdgeLength;
        int OnScreenSize;
        double OutwardMoveMultiplier;
        string ProcessSelectionSetName;
        Simplygon::SPL::v80::ReductionHeuristics ReductionHeuristics;
        Simplygon::SPL::v80::ReductionTargets ReductionTargets;
        double ShadingImportance;
        double SkinningImportance;
        Simplygon::SPL::v80::StopCondition StopCondition;
        int SymmetryAxis;
        double SymmetryDetectionTolerance;
        double SymmetryOffset;
        double TextureImportance;
        int TriangleCount;
        double TriangleRatio;
        bool UseAutomaticSymmetryDetection;
        bool UseHighQualityNormalCalculation;
        bool UseSymmetryQuadRetriangulator;
        bool UseVertexWeights;
        double VertexColorImportance;
		
		ReductionSettings() : BaseSettings()
        {
		
			AllowDegenerateTexCoords = true;
			CreateGeomorphGeometry = false;
			DataCreationPreferences = SG_DATACREATIONPREFERENCES_PREFER_OPTIMIZED_RESULT;
			EdgeSetImportance = 1.0;
			GenerateGeomorphData = false;
			GeometryImportance = 1.0;
			GroupImportance = 1.0;
			InwardMoveMultiplier = 1.0;
			KeepSymmetry = false;
			MaterialImportance = 1.0;
			MaxDeviation = 0.0;
			MaxEdgeLength = 2147483647;
			OnScreenSize = 2147483647;
			OutwardMoveMultiplier = 1.0;
			ProcessSelectionSetName = "";
			ReductionHeuristics = SG_REDUCTIONHEURISTICS_FAST;
			ReductionTargets = SG_REDUCTIONTARGET_ALL;
			ShadingImportance = 1.0;
			SkinningImportance = 1.0;
			StopCondition = SG_STOPCONDITION_ALL;
			SymmetryAxis = 0;
			SymmetryDetectionTolerance = 0.0004;
			SymmetryOffset = 0.0;
			TextureImportance = 1.0;
			TriangleCount = 2147483647;
			TriangleRatio = 1.0;
			UseAutomaticSymmetryDetection = false;
			UseHighQualityNormalCalculation = true;
			UseSymmetryQuadRetriangulator = true;
			UseVertexWeights = true;
			VertexColorImportance = 1.0;
        }

		
        ReductionSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["AllowDegenerateTexCoords"].isNull()) { AllowDegenerateTexCoords = (jsonNode["AllowDegenerateTexCoords"].asBool());	} else { AllowDegenerateTexCoords = true; }
			if (!jsonNode["CreateGeomorphGeometry"].isNull()) { CreateGeomorphGeometry = (jsonNode["CreateGeomorphGeometry"].asBool());	} else { CreateGeomorphGeometry = false; }
			if (!jsonNode["DataCreationPreferences"].isNull()) { DataCreationPreferences = Simplygon::SPL::v80::DataCreationPreferencesUtil::Parse(jsonNode["DataCreationPreferences"].asString(), SG_DATACREATIONPREFERENCES_PREFER_OPTIMIZED_RESULT);	} else { DataCreationPreferences = SG_DATACREATIONPREFERENCES_PREFER_OPTIMIZED_RESULT; }
			if (!jsonNode["EdgeSetImportance"].isNull()) { EdgeSetImportance = (jsonNode["EdgeSetImportance"].asDouble());	} else { EdgeSetImportance = 1.0; }
			if (!jsonNode["GenerateGeomorphData"].isNull()) { GenerateGeomorphData = (jsonNode["GenerateGeomorphData"].asBool());	} else { GenerateGeomorphData = false; }
			if (!jsonNode["GeometryImportance"].isNull()) { GeometryImportance = (jsonNode["GeometryImportance"].asDouble());	} else { GeometryImportance = 1.0; }
			if (!jsonNode["GroupImportance"].isNull()) { GroupImportance = (jsonNode["GroupImportance"].asDouble());	} else { GroupImportance = 1.0; }
			if (!jsonNode["InwardMoveMultiplier"].isNull()) { InwardMoveMultiplier = (jsonNode["InwardMoveMultiplier"].asDouble());	} else { InwardMoveMultiplier = 1.0; }
			if (!jsonNode["KeepSymmetry"].isNull()) { KeepSymmetry = (jsonNode["KeepSymmetry"].asBool());	} else { KeepSymmetry = false; }
			if (!jsonNode["MaterialImportance"].isNull()) { MaterialImportance = (jsonNode["MaterialImportance"].asDouble());	} else { MaterialImportance = 1.0; }
			if (!jsonNode["MaxDeviation"].isNull()) { MaxDeviation = (jsonNode["MaxDeviation"].asDouble());	} else { MaxDeviation = 0.0; }
			if (!jsonNode["MaxEdgeLength"].isNull()) { MaxEdgeLength = (jsonNode["MaxEdgeLength"].asDouble());	} else { MaxEdgeLength = 2147483647; }
			if (!jsonNode["OnScreenSize"].isNull()) { OnScreenSize = (jsonNode["OnScreenSize"].asInt());	} else { OnScreenSize = 2147483647; }
			if (!jsonNode["OutwardMoveMultiplier"].isNull()) { OutwardMoveMultiplier = (jsonNode["OutwardMoveMultiplier"].asDouble());	} else { OutwardMoveMultiplier = 1.0; }
			if (!jsonNode["ProcessSelectionSetName"].isNull()) { ProcessSelectionSetName = (jsonNode["ProcessSelectionSetName"].asString());	} else { ProcessSelectionSetName = ""; }
			if (!jsonNode["ReductionHeuristics"].isNull()) { ReductionHeuristics = Simplygon::SPL::v80::ReductionHeuristicsUtil::Parse(jsonNode["ReductionHeuristics"].asString(), SG_REDUCTIONHEURISTICS_FAST);	} else { ReductionHeuristics = SG_REDUCTIONHEURISTICS_FAST; }
			if (!jsonNode["ReductionTargets"].isNull()) { ReductionTargets = Simplygon::SPL::v80::ReductionTargetsUtil::Parse(jsonNode["ReductionTargets"].asString(), SG_REDUCTIONTARGET_ALL);	} else { ReductionTargets = SG_REDUCTIONTARGET_ALL; }
			if (!jsonNode["ShadingImportance"].isNull()) { ShadingImportance = (jsonNode["ShadingImportance"].asDouble());	} else { ShadingImportance = 1.0; }
			if (!jsonNode["SkinningImportance"].isNull()) { SkinningImportance = (jsonNode["SkinningImportance"].asDouble());	} else { SkinningImportance = 1.0; }
			if (!jsonNode["StopCondition"].isNull()) { StopCondition = Simplygon::SPL::v80::StopConditionUtil::Parse(jsonNode["StopCondition"].asString(), SG_STOPCONDITION_ALL);	} else { StopCondition = SG_STOPCONDITION_ALL; }
			if (!jsonNode["SymmetryAxis"].isNull()) { SymmetryAxis = (jsonNode["SymmetryAxis"].asInt());	} else { SymmetryAxis = 0; }
			if (!jsonNode["SymmetryDetectionTolerance"].isNull()) { SymmetryDetectionTolerance = (jsonNode["SymmetryDetectionTolerance"].asDouble());	} else { SymmetryDetectionTolerance = 0.0004; }
			if (!jsonNode["SymmetryOffset"].isNull()) { SymmetryOffset = (jsonNode["SymmetryOffset"].asDouble());	} else { SymmetryOffset = 0.0; }
			if (!jsonNode["TextureImportance"].isNull()) { TextureImportance = (jsonNode["TextureImportance"].asDouble());	} else { TextureImportance = 1.0; }
			if (!jsonNode["TriangleCount"].isNull()) { TriangleCount = (jsonNode["TriangleCount"].asInt());	} else { TriangleCount = 2147483647; }
			if (!jsonNode["TriangleRatio"].isNull()) { TriangleRatio = (jsonNode["TriangleRatio"].asDouble());	} else { TriangleRatio = 1.0; }
			if (!jsonNode["UseAutomaticSymmetryDetection"].isNull()) { UseAutomaticSymmetryDetection = (jsonNode["UseAutomaticSymmetryDetection"].asBool());	} else { UseAutomaticSymmetryDetection = false; }
			if (!jsonNode["UseHighQualityNormalCalculation"].isNull()) { UseHighQualityNormalCalculation = (jsonNode["UseHighQualityNormalCalculation"].asBool());	} else { UseHighQualityNormalCalculation = true; }
			if (!jsonNode["UseSymmetryQuadRetriangulator"].isNull()) { UseSymmetryQuadRetriangulator = (jsonNode["UseSymmetryQuadRetriangulator"].asBool());	} else { UseSymmetryQuadRetriangulator = true; }
			if (!jsonNode["UseVertexWeights"].isNull()) { UseVertexWeights = (jsonNode["UseVertexWeights"].asBool());	} else { UseVertexWeights = true; }
			if (!jsonNode["VertexColorImportance"].isNull()) { VertexColorImportance = (jsonNode["VertexColorImportance"].asDouble());	} else { VertexColorImportance = 1.0; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["AllowDegenerateTexCoords"] = (AllowDegenerateTexCoords);
			jsonNode["CreateGeomorphGeometry"] = (CreateGeomorphGeometry);
			jsonNode["DataCreationPreferences"] = Simplygon::SPL::v80::DataCreationPreferencesUtil::ToString(DataCreationPreferences);
			jsonNode["EdgeSetImportance"] = (EdgeSetImportance);
			jsonNode["GenerateGeomorphData"] = (GenerateGeomorphData);
			jsonNode["GeometryImportance"] = (GeometryImportance);
			jsonNode["GroupImportance"] = (GroupImportance);
			jsonNode["InwardMoveMultiplier"] = (InwardMoveMultiplier);
			jsonNode["KeepSymmetry"] = (KeepSymmetry);
			jsonNode["MaterialImportance"] = (MaterialImportance);
			jsonNode["MaxDeviation"] = (MaxDeviation);
			jsonNode["MaxEdgeLength"] = (MaxEdgeLength);
			jsonNode["OnScreenSize"] = (OnScreenSize);
			jsonNode["OutwardMoveMultiplier"] = (OutwardMoveMultiplier);
			jsonNode["ProcessSelectionSetName"] = (ProcessSelectionSetName);
			jsonNode["ReductionHeuristics"] = Simplygon::SPL::v80::ReductionHeuristicsUtil::ToString(ReductionHeuristics);
			jsonNode["ReductionTargets"] = Simplygon::SPL::v80::ReductionTargetsUtil::ToString(ReductionTargets);
			jsonNode["ShadingImportance"] = (ShadingImportance);
			jsonNode["SkinningImportance"] = (SkinningImportance);
			jsonNode["StopCondition"] = Simplygon::SPL::v80::StopConditionUtil::ToString(StopCondition);
			jsonNode["SymmetryAxis"] = (SymmetryAxis);
			jsonNode["SymmetryDetectionTolerance"] = (SymmetryDetectionTolerance);
			jsonNode["SymmetryOffset"] = (SymmetryOffset);
			jsonNode["TextureImportance"] = (TextureImportance);
			jsonNode["TriangleCount"] = (TriangleCount);
			jsonNode["TriangleRatio"] = (TriangleRatio);
			jsonNode["UseAutomaticSymmetryDetection"] = (UseAutomaticSymmetryDetection);
			jsonNode["UseHighQualityNormalCalculation"] = (UseHighQualityNormalCalculation);
			jsonNode["UseSymmetryQuadRetriangulator"] = (UseSymmetryQuadRetriangulator);
			jsonNode["UseVertexWeights"] = (UseVertexWeights);
			jsonNode["VertexColorImportance"] = (VertexColorImportance);
        }

	};
} } } 
