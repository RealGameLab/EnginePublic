//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  RepairSettings : public BaseSettings
    {
	public:
        int ProgressivePasses;
        double TjuncDist;
        bool UseTJunctionRemover;
        bool UseWelding;
        double WeldDist;
        bool WeldOnlyBorderVertices;
        bool WeldOnlyObjectBoundary;
		
		RepairSettings() : BaseSettings()
        {
		
			ProgressivePasses = 3;
			TjuncDist = 0.0;
			UseTJunctionRemover = true;
			UseWelding = true;
			WeldDist = 0.0;
			WeldOnlyBorderVertices = false;
			WeldOnlyObjectBoundary = false;
        }

		
        RepairSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["ProgressivePasses"].isNull()) { ProgressivePasses = (jsonNode["ProgressivePasses"].asInt());	} else { ProgressivePasses = 3; }
			if (!jsonNode["TjuncDist"].isNull()) { TjuncDist = (jsonNode["TjuncDist"].asDouble());	} else { TjuncDist = 0.0; }
			if (!jsonNode["UseTJunctionRemover"].isNull()) { UseTJunctionRemover = (jsonNode["UseTJunctionRemover"].asBool());	} else { UseTJunctionRemover = true; }
			if (!jsonNode["UseWelding"].isNull()) { UseWelding = (jsonNode["UseWelding"].asBool());	} else { UseWelding = true; }
			if (!jsonNode["WeldDist"].isNull()) { WeldDist = (jsonNode["WeldDist"].asDouble());	} else { WeldDist = 0.0; }
			if (!jsonNode["WeldOnlyBorderVertices"].isNull()) { WeldOnlyBorderVertices = (jsonNode["WeldOnlyBorderVertices"].asBool());	} else { WeldOnlyBorderVertices = false; }
			if (!jsonNode["WeldOnlyObjectBoundary"].isNull()) { WeldOnlyObjectBoundary = (jsonNode["WeldOnlyObjectBoundary"].asBool());	} else { WeldOnlyObjectBoundary = false; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["ProgressivePasses"] = (ProgressivePasses);
			jsonNode["TjuncDist"] = (TjuncDist);
			jsonNode["UseTJunctionRemover"] = (UseTJunctionRemover);
			jsonNode["UseWelding"] = (UseWelding);
			jsonNode["WeldDist"] = (WeldDist);
			jsonNode["WeldOnlyBorderVertices"] = (WeldOnlyBorderVertices);
			jsonNode["WeldOnlyObjectBoundary"] = (WeldOnlyObjectBoundary);
        }

	};
} } } 
