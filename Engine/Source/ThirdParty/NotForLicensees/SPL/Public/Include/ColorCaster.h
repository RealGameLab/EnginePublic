//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseMaterialCaster.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  ColorCaster : public BaseMaterialCaster
    {
	public:
        bool BakeOpacityInAlpha;
        string ColorType;
        int Dilation;
        Simplygon::SPL::v80::DitherType DitherType;
        Simplygon::SPL::v80::FillMode FillMode;
        int OutputChannelBitDepth;
        int OutputChannels;
        bool OutputSRGB;
        bool UseMultisampling;
		
		ColorCaster() : BaseMaterialCaster()
        {
			Type = "ColorCaster";
		
			BakeOpacityInAlpha = false;
			ColorType = "Diffuse";
			Dilation = 10;
			DitherType = SG_DITHERPATTERNS_FLOYDSTEINBERG;
			FillMode = SG_ATLASFILLMODE_INTERPOLATE;
			OutputChannelBitDepth = 8;
			OutputChannels = 4;
			OutputSRGB = false;
			UseMultisampling = true;
        }

		
        ColorCaster(const Json::Value& jsonNode) : BaseMaterialCaster(jsonNode)
        {
			Type = "ColorCaster";
			if (!jsonNode["BakeOpacityInAlpha"].isNull()) { BakeOpacityInAlpha = (jsonNode["BakeOpacityInAlpha"].asBool()); } else { BakeOpacityInAlpha = false; }
			if (!jsonNode["ColorType"].isNull()) { ColorType = (jsonNode["ColorType"].asString()); } else { ColorType = "Diffuse"; }
			if (!jsonNode["Dilation"].isNull()) { Dilation = (jsonNode["Dilation"].asInt()); } else { Dilation = 10; }
			if (!jsonNode["DitherType"].isNull()) { DitherType = Simplygon::SPL::v80::DitherTypeUtil::Parse(jsonNode["DitherType"].asString(), SG_DITHERPATTERNS_FLOYDSTEINBERG); } else { DitherType = SG_DITHERPATTERNS_FLOYDSTEINBERG; }
			if (!jsonNode["FillMode"].isNull()) { FillMode = Simplygon::SPL::v80::FillModeUtil::Parse(jsonNode["FillMode"].asString(), SG_ATLASFILLMODE_INTERPOLATE); } else { FillMode = SG_ATLASFILLMODE_INTERPOLATE; }
			if (!jsonNode["OutputChannelBitDepth"].isNull()) { OutputChannelBitDepth = (jsonNode["OutputChannelBitDepth"].asInt()); } else { OutputChannelBitDepth = 8; }
			if (!jsonNode["OutputChannels"].isNull()) { OutputChannels = (jsonNode["OutputChannels"].asInt()); } else { OutputChannels = 4; }
			if (!jsonNode["OutputSRGB"].isNull()) { OutputSRGB = (jsonNode["OutputSRGB"].asBool()); } else { OutputSRGB = false; }
			if (!jsonNode["UseMultisampling"].isNull()) { UseMultisampling = (jsonNode["UseMultisampling"].asBool()); } else { UseMultisampling = true; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseMaterialCaster::ToJson(jsonNode);

			jsonNode["BakeOpacityInAlpha"] = (BakeOpacityInAlpha);
			jsonNode["ColorType"] = (ColorType);
			jsonNode["Dilation"] = (Dilation);
			jsonNode["DitherType"] = Simplygon::SPL::v80::DitherTypeUtil::ToString(DitherType);
			jsonNode["FillMode"] = Simplygon::SPL::v80::FillModeUtil::ToString(FillMode);
			jsonNode["OutputChannelBitDepth"] = (OutputChannelBitDepth);
			jsonNode["OutputChannels"] = (OutputChannels);
			jsonNode["OutputSRGB"] = (OutputSRGB);
			jsonNode["UseMultisampling"] = (UseMultisampling);
        }

	};
} } } 
