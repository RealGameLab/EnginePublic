//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  ImpostorSettings : public BaseSettings
    {
	public:
        double TightFittingDepthOffset;
        bool UseTightFitting;
        double ViewDirX;
        double ViewDirY;
        double ViewDirZ;
		
		ImpostorSettings() : BaseSettings()
        {
		
			TightFittingDepthOffset = 0.0;
			UseTightFitting = false;
			ViewDirX = 0.0;
			ViewDirY = 0.0;
			ViewDirZ = 1.0;
        }

		
        ImpostorSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["TightFittingDepthOffset"].isNull()) { TightFittingDepthOffset = (jsonNode["TightFittingDepthOffset"].asDouble());	} else { TightFittingDepthOffset = 0.0; }
			if (!jsonNode["UseTightFitting"].isNull()) { UseTightFitting = (jsonNode["UseTightFitting"].asBool());	} else { UseTightFitting = false; }
			if (!jsonNode["ViewDirX"].isNull()) { ViewDirX = (jsonNode["ViewDirX"].asDouble());	} else { ViewDirX = 0.0; }
			if (!jsonNode["ViewDirY"].isNull()) { ViewDirY = (jsonNode["ViewDirY"].asDouble());	} else { ViewDirY = 0.0; }
			if (!jsonNode["ViewDirZ"].isNull()) { ViewDirZ = (jsonNode["ViewDirZ"].asDouble());	} else { ViewDirZ = 1.0; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["TightFittingDepthOffset"] = (TightFittingDepthOffset);
			jsonNode["UseTightFitting"] = (UseTightFitting);
			jsonNode["ViewDirX"] = (ViewDirX);
			jsonNode["ViewDirY"] = (ViewDirY);
			jsonNode["ViewDirZ"] = (ViewDirZ);
        }

	};
} } } 
