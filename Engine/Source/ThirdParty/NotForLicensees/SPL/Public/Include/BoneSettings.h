//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  BoneSettings : public BaseSettings
    {
	public:
        int BoneCount;
        double BoneRatio;
        Simplygon::SPL::v80::BoneReductionTargets BoneReductionTargets;
        bool LimitBonesPerVertex;
        string LockBoneSelectionSetName;
        int MaxBonePerVertex;
        double MaxDeviation;
        int OnScreenSize;
        bool RemoveUnusedBones;
        string RemoveBoneSelectionSetName;
        bool UseBoneReducer;
		
		BoneSettings() : BaseSettings()
        {
		
			BoneCount = 2147483647;
			BoneRatio = 1.0;
			BoneReductionTargets = SG_BONEREDUCTIONTARGET_ALL;
			LimitBonesPerVertex = false;
			LockBoneSelectionSetName = "";
			MaxBonePerVertex = 4;
			MaxDeviation = 0.0;
			OnScreenSize = 2147483647;
			RemoveUnusedBones = false;
			RemoveBoneSelectionSetName = "";
			UseBoneReducer = false;
        }

		
        BoneSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["BoneCount"].isNull()) { BoneCount = (jsonNode["BoneCount"].asInt());	} else { BoneCount = 2147483647; }
			if (!jsonNode["BoneRatio"].isNull()) { BoneRatio = (jsonNode["BoneRatio"].asDouble());	} else { BoneRatio = 1.0; }
			if (!jsonNode["BoneReductionTargets"].isNull()) { BoneReductionTargets = Simplygon::SPL::v80::BoneReductionTargetsUtil::Parse(jsonNode["BoneReductionTargets"].asString(), SG_BONEREDUCTIONTARGET_ALL);	} else { BoneReductionTargets = SG_BONEREDUCTIONTARGET_ALL; }
			if (!jsonNode["LimitBonesPerVertex"].isNull()) { LimitBonesPerVertex = (jsonNode["LimitBonesPerVertex"].asBool());	} else { LimitBonesPerVertex = false; }
			if (!jsonNode["LockBoneSelectionSetName"].isNull()) { LockBoneSelectionSetName = (jsonNode["LockBoneSelectionSetName"].asString());	} else { LockBoneSelectionSetName = ""; }
			if (!jsonNode["MaxBonePerVertex"].isNull()) { MaxBonePerVertex = (jsonNode["MaxBonePerVertex"].asInt());	} else { MaxBonePerVertex = 4; }
			if (!jsonNode["MaxDeviation"].isNull()) { MaxDeviation = (jsonNode["MaxDeviation"].asDouble());	} else { MaxDeviation = 0.0; }
			if (!jsonNode["OnScreenSize"].isNull()) { OnScreenSize = (jsonNode["OnScreenSize"].asInt());	} else { OnScreenSize = 2147483647; }
			if (!jsonNode["RemoveUnusedBones"].isNull()) { RemoveUnusedBones = (jsonNode["RemoveUnusedBones"].asBool());	} else { RemoveUnusedBones = false; }
			if (!jsonNode["RemoveBoneSelectionSetName"].isNull()) { RemoveBoneSelectionSetName = (jsonNode["RemoveBoneSelectionSetName"].asString());	} else { RemoveBoneSelectionSetName = ""; }
			if (!jsonNode["UseBoneReducer"].isNull()) { UseBoneReducer = (jsonNode["UseBoneReducer"].asBool());	} else { UseBoneReducer = false; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["BoneCount"] = (BoneCount);
			jsonNode["BoneRatio"] = (BoneRatio);
			jsonNode["BoneReductionTargets"] = Simplygon::SPL::v80::BoneReductionTargetsUtil::ToString(BoneReductionTargets);
			jsonNode["LimitBonesPerVertex"] = (LimitBonesPerVertex);
			jsonNode["LockBoneSelectionSetName"] = (LockBoneSelectionSetName);
			jsonNode["MaxBonePerVertex"] = (MaxBonePerVertex);
			jsonNode["MaxDeviation"] = (MaxDeviation);
			jsonNode["OnScreenSize"] = (OnScreenSize);
			jsonNode["RemoveUnusedBones"] = (RemoveUnusedBones);
			jsonNode["RemoveBoneSelectionSetName"] = (RemoveBoneSelectionSetName);
			jsonNode["UseBoneReducer"] = (UseBoneReducer);
        }

	};
} } } 
