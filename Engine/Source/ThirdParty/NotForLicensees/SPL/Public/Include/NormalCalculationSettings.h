//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  NormalCalculationSettings : public BaseSettings
    {
	public:
        bool DetectPrimitiveNormals;
        double HardEdgeAngleInRadians;
        bool RepairInvalidNormals;
        bool ReplaceNormals;
        bool ReplaceTangents;
        bool ScaleByAngle;
        bool ScaleByArea;
		
		NormalCalculationSettings() : BaseSettings()
        {
		
			DetectPrimitiveNormals = false;
			HardEdgeAngleInRadians = 80.0 * (3.14 / 180.0);
			RepairInvalidNormals = false;
			ReplaceNormals = false;
			ReplaceTangents = false;
			ScaleByAngle = true;
			ScaleByArea = true;
        }

		
        NormalCalculationSettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["DetectPrimitiveNormals"].isNull()) { DetectPrimitiveNormals = (jsonNode["DetectPrimitiveNormals"].asBool());	} else { DetectPrimitiveNormals = false; }
			if (!jsonNode["HardEdgeAngleInRadians"].isNull()) { HardEdgeAngleInRadians = (jsonNode["HardEdgeAngleInRadians"].asDouble());	} else { HardEdgeAngleInRadians = 80.0 * (3.14 / 180.0); }
			if (!jsonNode["RepairInvalidNormals"].isNull()) { RepairInvalidNormals = (jsonNode["RepairInvalidNormals"].asBool());	} else { RepairInvalidNormals = false; }
			if (!jsonNode["ReplaceNormals"].isNull()) { ReplaceNormals = (jsonNode["ReplaceNormals"].asBool());	} else { ReplaceNormals = false; }
			if (!jsonNode["ReplaceTangents"].isNull()) { ReplaceTangents = (jsonNode["ReplaceTangents"].asBool());	} else { ReplaceTangents = false; }
			if (!jsonNode["ScaleByAngle"].isNull()) { ScaleByAngle = (jsonNode["ScaleByAngle"].asBool());	} else { ScaleByAngle = true; }
			if (!jsonNode["ScaleByArea"].isNull()) { ScaleByArea = (jsonNode["ScaleByArea"].asBool());	} else { ScaleByArea = true; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["DetectPrimitiveNormals"] = (DetectPrimitiveNormals);
			jsonNode["HardEdgeAngleInRadians"] = (HardEdgeAngleInRadians);
			jsonNode["RepairInvalidNormals"] = (RepairInvalidNormals);
			jsonNode["ReplaceNormals"] = (ReplaceNormals);
			jsonNode["ReplaceTangents"] = (ReplaceTangents);
			jsonNode["ScaleByAngle"] = (ScaleByAngle);
			jsonNode["ScaleByArea"] = (ScaleByArea);
        }

	};
} } } 
