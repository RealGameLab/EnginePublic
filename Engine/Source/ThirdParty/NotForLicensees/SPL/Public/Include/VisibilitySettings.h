//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseSettings.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class VisibilitySettings : public BaseSettings
    {
	public:
        string CameraSelectionSetName;
        bool ConservativeMode;
        bool CullOccludedGeometry;
        double FillNonVisibleAreaThreshold;
        bool ForceVisibilityCalculation;
        string OccluderSelectionSetName;
        bool RemoveTrianglesNotOccludingOtherTriangles;
        bool UseBackfaceCulling;
        bool UseVisibilityWeightsInReducer;
        bool UseVisibilityWeightsInTexcoordGenerator;
        double VisibilityWeightsPower;
        bool UseCustomVisibilitySphere;
        int CustomVisibilitySphereFidelity;
        double CustomVisibilitySphereYaw;
        double CustomVisibilitySpherePitch;
        double CustomVisibilitySphereCoverage;
		
		VisibilitySettings() : BaseSettings()
        {
		
			CameraSelectionSetName = "";
			ConservativeMode = false;
			CullOccludedGeometry = false;
			FillNonVisibleAreaThreshold = 0.0;
			ForceVisibilityCalculation = false;
			OccluderSelectionSetName = "";
			RemoveTrianglesNotOccludingOtherTriangles = false;
			UseBackfaceCulling = true;
			UseVisibilityWeightsInReducer = false;
			UseVisibilityWeightsInTexcoordGenerator = false;
			VisibilityWeightsPower = 1.0;
			UseCustomVisibilitySphere = false;
			CustomVisibilitySphereFidelity = 3;
			CustomVisibilitySphereYaw = 0.0;
			CustomVisibilitySpherePitch = 0.0;
			CustomVisibilitySphereCoverage = 180;
        }

		
        VisibilitySettings(const Json::Value& jsonNode) : BaseSettings(jsonNode)
        {
			if (!jsonNode["CameraSelectionSetName"].isNull()) { CameraSelectionSetName = (jsonNode["CameraSelectionSetName"].asString());	} else { CameraSelectionSetName = ""; }
			if (!jsonNode["ConservativeMode"].isNull()) { ConservativeMode = (jsonNode["ConservativeMode"].asBool());	} else { ConservativeMode = false; }
			if (!jsonNode["CullOccludedGeometry"].isNull()) { CullOccludedGeometry = (jsonNode["CullOccludedGeometry"].asBool());	} else { CullOccludedGeometry = false; }
			if (!jsonNode["FillNonVisibleAreaThreshold"].isNull()) { FillNonVisibleAreaThreshold = (jsonNode["FillNonVisibleAreaThreshold"].asDouble());	} else { FillNonVisibleAreaThreshold = 0.0; }
			if (!jsonNode["ForceVisibilityCalculation"].isNull()) { ForceVisibilityCalculation = (jsonNode["ForceVisibilityCalculation"].asBool());	} else { ForceVisibilityCalculation = false; }
			if (!jsonNode["OccluderSelectionSetName"].isNull()) { OccluderSelectionSetName = (jsonNode["OccluderSelectionSetName"].asString());	} else { OccluderSelectionSetName = ""; }
			if (!jsonNode["RemoveTrianglesNotOccludingOtherTriangles"].isNull()) { RemoveTrianglesNotOccludingOtherTriangles = (jsonNode["RemoveTrianglesNotOccludingOtherTriangles"].asBool());	} else { RemoveTrianglesNotOccludingOtherTriangles = false; }
			if (!jsonNode["UseBackfaceCulling"].isNull()) { UseBackfaceCulling = (jsonNode["UseBackfaceCulling"].asBool());	} else { UseBackfaceCulling = true; }
			if (!jsonNode["UseVisibilityWeightsInReducer"].isNull()) { UseVisibilityWeightsInReducer = (jsonNode["UseVisibilityWeightsInReducer"].asBool());	} else { UseVisibilityWeightsInReducer = false; }
			if (!jsonNode["UseVisibilityWeightsInTexcoordGenerator"].isNull()) { UseVisibilityWeightsInTexcoordGenerator = (jsonNode["UseVisibilityWeightsInTexcoordGenerator"].asBool());	} else { UseVisibilityWeightsInTexcoordGenerator = false; }
			if (!jsonNode["VisibilityWeightsPower"].isNull()) { VisibilityWeightsPower = (jsonNode["VisibilityWeightsPower"].asDouble());	} else { VisibilityWeightsPower = 1.0; }
			if (!jsonNode["UseCustomVisibilitySphere"].isNull()) { UseCustomVisibilitySphere = (jsonNode["UseCustomVisibilitySphere"].asBool());	} else { UseCustomVisibilitySphere = false; }
			if (!jsonNode["CustomVisibilitySphereFidelity"].isNull()) { CustomVisibilitySphereFidelity = (jsonNode["CustomVisibilitySphereFidelity"].asInt());	} else { CustomVisibilitySphereFidelity = 3; }
			if (!jsonNode["CustomVisibilitySphereYaw"].isNull()) { CustomVisibilitySphereYaw = (jsonNode["CustomVisibilitySphereYaw"].asDouble());	} else { CustomVisibilitySphereYaw = 0.0; }
			if (!jsonNode["CustomVisibilitySpherePitch"].isNull()) { CustomVisibilitySpherePitch = (jsonNode["CustomVisibilitySpherePitch"].asDouble());	} else { CustomVisibilitySpherePitch = 0.0; }
			if (!jsonNode["CustomVisibilitySphereCoverage"].isNull()) { CustomVisibilitySphereCoverage = (jsonNode["CustomVisibilitySphereCoverage"].asDouble());	} else { CustomVisibilitySphereCoverage = 180; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseSettings::ToJson(jsonNode);

			jsonNode["CameraSelectionSetName"] = (CameraSelectionSetName);
			jsonNode["ConservativeMode"] = (ConservativeMode);
			jsonNode["CullOccludedGeometry"] = (CullOccludedGeometry);
			jsonNode["FillNonVisibleAreaThreshold"] = (FillNonVisibleAreaThreshold);
			jsonNode["ForceVisibilityCalculation"] = (ForceVisibilityCalculation);
			jsonNode["OccluderSelectionSetName"] = (OccluderSelectionSetName);
			jsonNode["RemoveTrianglesNotOccludingOtherTriangles"] = (RemoveTrianglesNotOccludingOtherTriangles);
			jsonNode["UseBackfaceCulling"] = (UseBackfaceCulling);
			jsonNode["UseVisibilityWeightsInReducer"] = (UseVisibilityWeightsInReducer);
			jsonNode["UseVisibilityWeightsInTexcoordGenerator"] = (UseVisibilityWeightsInTexcoordGenerator);
			jsonNode["VisibilityWeightsPower"] = (VisibilityWeightsPower);
			jsonNode["UseCustomVisibilitySphere"] = (UseCustomVisibilitySphere);
			jsonNode["CustomVisibilitySphereFidelity"] = (CustomVisibilitySphereFidelity);
			jsonNode["CustomVisibilitySphereYaw"] = (CustomVisibilitySphereYaw);
			jsonNode["CustomVisibilitySpherePitch"] = (CustomVisibilitySpherePitch);
			jsonNode["CustomVisibilitySphereCoverage"] = (CustomVisibilitySphereCoverage);
        }

	};
} } } 
