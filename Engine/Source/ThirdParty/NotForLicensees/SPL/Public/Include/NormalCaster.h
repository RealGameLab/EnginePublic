//------------------------------------------------------
// File generated by SimplyCode
//------------------------------------------------------

#include <string>

#include "Enums.h"
#include "BaseMaterialCaster.h"

using namespace std;

namespace Simplygon { namespace SPL { namespace v80 {

    class  NormalCaster : public BaseMaterialCaster
    {
	public:
        int Dilation;
        Simplygon::SPL::v80::DitherType DitherType;
        Simplygon::SPL::v80::FillMode FillMode;
        bool FlipBackfacingNormals;
        bool FlipGreen;
        bool GenerateTangentSpaceNormals;
        string NormalsChannel;
        int OutputChannelBitDepth;
        int OutputChannels;
		
		NormalCaster() : BaseMaterialCaster()
        {
			Type = "NormalCaster";
		
			Dilation = 10;
			DitherType = SG_DITHERPATTERNS_FLOYDSTEINBERG;
			FillMode = SG_ATLASFILLMODE_INTERPOLATE;
			FlipBackfacingNormals = false;
			FlipGreen = false;
			GenerateTangentSpaceNormals = false;
			NormalsChannel = "Normals";
			OutputChannelBitDepth = 8;
			OutputChannels = 4;
        }

		
        NormalCaster(const Json::Value& jsonNode) : BaseMaterialCaster(jsonNode)
        {
			Type = "NormalCaster";
			if (!jsonNode["Dilation"].isNull()) { Dilation = (jsonNode["Dilation"].asInt()); } else { Dilation = 10; }
			if (!jsonNode["DitherType"].isNull()) { DitherType = Simplygon::SPL::v80::DitherTypeUtil::Parse(jsonNode["DitherType"].asString(), SG_DITHERPATTERNS_FLOYDSTEINBERG); } else { DitherType = SG_DITHERPATTERNS_FLOYDSTEINBERG; }
			if (!jsonNode["FillMode"].isNull()) { FillMode = Simplygon::SPL::v80::FillModeUtil::Parse(jsonNode["FillMode"].asString(), SG_ATLASFILLMODE_INTERPOLATE); } else { FillMode = SG_ATLASFILLMODE_INTERPOLATE; }
			if (!jsonNode["FlipBackfacingNormals"].isNull()) { FlipBackfacingNormals = (jsonNode["FlipBackfacingNormals"].asBool()); } else { FlipBackfacingNormals = false; }
			if (!jsonNode["FlipGreen"].isNull()) { FlipGreen = (jsonNode["FlipGreen"].asBool()); } else { FlipGreen = false; }
			if (!jsonNode["GenerateTangentSpaceNormals"].isNull()) { GenerateTangentSpaceNormals = (jsonNode["GenerateTangentSpaceNormals"].asBool()); } else { GenerateTangentSpaceNormals = false; }
			if (!jsonNode["NormalsChannel"].isNull()) { NormalsChannel = (jsonNode["NormalsChannel"].asString()); } else { NormalsChannel = "Normals"; }
			if (!jsonNode["OutputChannelBitDepth"].isNull()) { OutputChannelBitDepth = (jsonNode["OutputChannelBitDepth"].asInt()); } else { OutputChannelBitDepth = 8; }
			if (!jsonNode["OutputChannels"].isNull()) { OutputChannels = (jsonNode["OutputChannels"].asInt()); } else { OutputChannels = 4; }
        }


        virtual void ToJson(Json::Value& jsonNode)
        {
			BaseMaterialCaster::ToJson(jsonNode);

			jsonNode["Dilation"] = (Dilation);
			jsonNode["DitherType"] = Simplygon::SPL::v80::DitherTypeUtil::ToString(DitherType);
			jsonNode["FillMode"] = Simplygon::SPL::v80::FillModeUtil::ToString(FillMode);
			jsonNode["FlipBackfacingNormals"] = (FlipBackfacingNormals);
			jsonNode["FlipGreen"] = (FlipGreen);
			jsonNode["GenerateTangentSpaceNormals"] = (GenerateTangentSpaceNormals);
			jsonNode["NormalsChannel"] = (NormalsChannel);
			jsonNode["OutputChannelBitDepth"] = (OutputChannelBitDepth);
			jsonNode["OutputChannels"] = (OutputChannels);
        }

	};
} } } 
